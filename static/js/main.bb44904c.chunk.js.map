{"version":3,"sources":["components/map/index.js","components/points/index.js","components/app/index.js","serviceWorker.js","index.js"],"names":["YaMap","props","react_default","a","createElement","react_yandex_maps_umd_production_min","width","height","className","instanceRef","ref","map","getMap","defaultState","center","zoom","points","point","index","key","geometry","coords","options","draggable","modules","properties","iconContent","balloonContentHeader","name","hintContent","onDragEnd","evt","originalEvent","target","_coordinates","updatePoint","balloonCloseButton","strokeColor","strokeWidth","strokeOpacity","draggedItem","Points","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","type","value","onChange","onKeyDown","keyCode","preventDefault","createPoint","_ref","onDragOver","draggedOverItem","items","filter","item","splice","updateList","onDragStart","console","log","dataTransfer","effectAllowed","setData","onClick","concat","toConsumableArray","slice","deletePoint","App","setMap","_useState3","_useState4","setPoints","components_points","getCenter","components_map","temp","Boolean","window","location","hostname","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb44904c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { YMaps, Map, Placemark, Polyline } from 'react-yandex-maps';\r\nimport './style.scss';\r\n\r\nconst YaMap = props => {\r\n  const getMap = map => {\r\n    props.getMap(map);\r\n  };\r\n\r\n  const onDragEnd = (index, evt) => {\r\n    const coords = evt.originalEvent.target.geometry._coordinates;\r\n    props.updatePoint(index, coords);\r\n  };\r\n\r\n  return (\r\n    <YMaps>\r\n      <Map\r\n        width={`100%`}\r\n        height={`100%`}\r\n        className={`map__wrapper`}\r\n        instanceRef={ref => getMap(ref)}\r\n        defaultState={{ center: [55.75, 37.57], zoom: 9 }}\r\n      >\r\n        {props.points.map((point, index) => (\r\n          <Placemark\r\n            key={index}\r\n            geometry={point.coords}\r\n            options={{ draggable: true }}\r\n            modules={[\"geoObject.addon.hint\", 'geoObject.addon.balloon']}\r\n            properties={{\r\n              iconContent: index + 1,\r\n              balloonContentHeader: point.name,\r\n              hintContent: point.name\r\n            }}\r\n            onDragEnd={evt => onDragEnd(index, evt)}\r\n          />\r\n        ))}\r\n        <Polyline\r\n          geometry={props.points.map(point => point.coords)}\r\n          options={{\r\n            balloonCloseButton: false,\r\n            strokeColor: '#000',\r\n            strokeWidth: 4,\r\n            strokeOpacity: 0.5\r\n          }}\r\n        />\r\n      </Map>\r\n    </YMaps>\r\n  );\r\n};\r\n\r\nexport default YaMap;\r\n","import React, { useState } from 'react';\r\nimport './style.scss';\r\n\r\nlet draggedItem = null;\r\n\r\nconst Points = props => {\r\n  const [inputValue, setInputValue] = useState(``);\r\n\r\n  const onInputChange = evt => {\r\n    const value = evt.target.value;\r\n    setInputValue(value);\r\n  };\r\n\r\n  const onEnterDown = evt => {\r\n    if (evt.keyCode !== 13 || inputValue === ``) return;\r\n    evt.preventDefault();\r\n    props.createPoint(inputValue);\r\n    setInputValue(``);\r\n  };\r\n\r\n  const deletePoint = index => {\r\n    const points = [...props.points.slice(0, index), ...props.points.slice(index + 1)];\r\n    props.updateList(points);\r\n  };\r\n\r\n  const onDragStart = (evt, index) => {\r\n    draggedItem = props.points[index];\r\n    console.log(index, draggedItem);\r\n    evt.dataTransfer.effectAllowed = 'move';\r\n    evt.dataTransfer.setData('text/html', evt.target);\r\n    // evt.dataTransfer.setDragImage(evt.target, 20, 20);\r\n  };\r\n\r\n  const onDragOver = index => {\r\n    const draggedOverItem = props.points[index];\r\n    if (draggedItem === draggedOverItem) return;\r\n\r\n    let items = props.points.filter(item => item !== draggedItem);\r\n    items.splice(index, 0, draggedItem);\r\n    props.updateList(items);\r\n  };\r\n\r\n  const onDragEnd = () => {\r\n    draggedItem = null;\r\n  };\r\n\r\n  return (\r\n    <div className={`points__wrapper`}>\r\n      <input\r\n        className={`points__input`}\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={onInputChange}\r\n        onKeyDown={onEnterDown}\r\n      />\r\n      <ul className={`points__list`}>\r\n        {props.points.map(({ name }, index) => (\r\n          <li\r\n            key={name}\r\n            className={`points__item`}\r\n            onDragOver={() => onDragOver(index)}\r\n            draggable\r\n              onDragStart={evt => onDragStart(evt, index)}\r\n              onDragEnd={onDragEnd}\r\n          >\r\n            <span\r\n              className={`points__content`}\r\n              \r\n            >\r\n              {name}\r\n            </span>\r\n            <button\r\n              className={`points__delete`}\r\n              onClick={() => deletePoint(index)}\r\n            />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Points;\r\n","import React, {useState} from 'react';\r\nimport Map from '../map';\r\nimport Points from '../points';\r\nimport './style.scss';\r\n\r\nconst App = props => {\r\n  const [map, setMap] = useState();\r\n  const [points, setPoints] = useState([]);\r\n\r\n  const createPoint = (name) => {\r\n    const coords = map.getCenter();\r\n    setPoints([...points, {coords, name}]);\r\n  }\r\n\r\n  const updatePoint = (index, coords) => {\r\n    const { name } = points[index];\r\n    const temp = [...points.slice(0, index), {coords, name}, ...points.slice(index + 1)];\r\n    setPoints([...temp]);\r\n  }\r\n\r\n  const updateList = (points) => {\r\n    setPoints(points);\r\n  }\r\n\r\n  const getMap = (map) => {\r\n    setMap(map);\r\n  }\r\n\r\n  return (\r\n    <div className={`app__wrapper`}>\r\n      <div className={`app__points`}>\r\n        <Points createPoint={createPoint} points={points} updateList={updateList}/>\r\n      </div>\r\n      <div className={`app__map`}>\r\n        <Map getMap={getMap} points={points} updatePoint={updatePoint}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}